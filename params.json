{"name":"Padrão Command","tagline":"Padrão Command em Python","body":"### Objetivo\r\n* Encapsula um pedido como um objeto, tornando possível a parametrização de clientes com diferentes pedidos, filas e dá suporte a operações que não são possíveis de serem realizadas\r\n* Promove a \"invocação de um metódo em um objeto\"\r\n* _Um Callback orientado a objeto_\r\n\r\n### Problema\r\nNecessidade de enviar pedidos aos objetos sem conhecer nada da operação sendo requisitada ou do receptor da requisição.\r\n\r\n###Solução e Estrutura\r\nO _client_ que cria o comando não é o _client_ mesmo que o executa. Essa sepração promove uma maior flexibilidade no timing e no sequenciamento de comandos. A materialização de comandos significa que eles devem ser manipulados como um outro objeto qualquer.\r\n![](http://sourcemaking.com/files/v2/content/patterns/Command-2x.png)\r\nOs objetos do tipo _command_ podem ser pensados como _tokens_ que são criados por um _client_ que sabe o quê precisa ser feito e então é passado para outro _client_ que tem recursos para fazê-lo.\r\n\r\n###Exemplo\r\n![](http://sourcemaking.com/files/v2/content/patterns/Command_example1-2x.png)\r\n\r\n### Authors and Contributors\r\nAutores @pnakibar e @rikes\r\nAdaptado de http://sourcemaking.com/","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}